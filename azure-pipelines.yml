trigger:
  # start a new build for every push
  batch: False
  branches:
    include:
      - 'main'
      - 'maint/*'
pr:
  branches:
    include:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string

schedules:
- cron: "0 0 * * *"
  displayName: 'Daily midnight build'
  branches:
    include:
      - 'main'
      - 'maint/*'
  always: 'true'


stages:

- stage: Check
  jobs:
    - job: Skip
      pool:
        vmImage: 'ubuntu-18.04'
      variables:
        DECODE_PERCENTS: 'false'
        RET: 'true'
        BUILD_REASON: $(Build.Reason)
      steps:
      - bash: |
          git_log=`git log --format=oneline -n 1 --skip=1`
          echo "##vso[task.setvariable variable=log]$git_log"
      - bash: echo "##vso[task.setvariable variable=RET]false"
        condition: and(eq(variables.BUILD_REASON, 'PullRequest'), or(contains(variables.log, '[skip azp]'), contains(variables.log, '[azp skip]'), contains(variables.log, '[skip ci]'), contains(variables.log, '[ci skip]')))
      - bash: echo "##vso[task.setvariable variable=start_main;isOutput=true]$RET"
        name: result

- stage: Style
  jobs:
  - job: Style
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - bash: echo $(COMMIT_MSG)
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        addToPath: true
      displayName: 'Get Python'
    - script: python -m pip install --progress-bar off check-manifest twine wheel pydocstyle flake8
      displayName: Install dependencies
    - bash: |
        make flake
      displayName: make flake
      condition: always()
    - bash: |
        make pydocstyle
      displayName: make pydocstyle
      condition: always()
    - bash: |
        make check-manifest
      displayName: make check-manifest
      condition: always()
    - bash: |
        make check-readme
      displayName: make check-readme
      condition: always()

- stage: Main
  condition: and(succeeded(), eq(dependencies.Check.outputs['Skip.result.start_main'], 'true'))
  dependsOn: Check
  jobs:
  - job: Pytest
    variables:
      DISPLAY: ':99'
    strategy:
      matrix:
        Windows:
          imageName: 'windows-latest'
          python.version: '3.9'
          OS: windows
        macOS:
          imageName: 'macOS-11'
          python.version: '3.9'
          OS: macos
        Linux:
          imageName: 'ubuntu-20.04'
          python.version: '3.9'
          OS: linux
        Linux-dev:
          imageName: 'ubuntu-20.04'
          python.version: '3.9'
          OS: linux
          MNE: dev
    pool:
      vmImage: $(imageName)
    steps:
    - bash: |
        set -e
        echo "##vso[task.prependpath]$CONDA\envs\mne-kit-gui;$CONDA\envs\mne-kit-gui\Scripts;$CONDA\envs\mne-kit-gui\Library\bin;$CONDA;$CONDA\condabin;$CONDA\Scripts;$CONDA\Library\bin;"
        echo "##vso[task.setvariable variable=CONDA_PREFIX]$CONDA\envs\mne-kit-gui"
        echo "##vso[task.setvariable variable=CONDA_DEFAULT_ENV]mne-kit-gui"
        git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
        powershell gl-ci-helpers/appveyor/install_opengl.ps1
      displayName: "Windows: install OpenGL and set conda paths"
      condition: eq(variables['OS'], 'windows')
    - bash: |
        set -e
        sudo apt update -qq
        sudo apt install -yqq libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 libopengl0
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset
        echo "##vso[task.prependpath]$CONDA/envs/mne-kit-gui/bin:$CONDA/bin"
        echo "##vso[task.setvariable variable=CONDA_PREFIX]$CONDA/envs/mne-kit-gui"
        echo "##vso[task.setvariable variable=CONDA_DEFAULT_ENV]mne-kit-gui"
      displayName: "Linux: start Xvfb and set conda paths"
      condition: eq(variables['OS'], 'linux')
    - bash: |
        set -e
        echo "##vso[task.prependpath]$CONDA/envs/mne-kit-gui/bin:$CONDA/bin"
        echo "##vso[task.setvariable variable=CONDA_PREFIX]$CONDA/envs/mne-kit-gui"
        echo "##vso[task.setvariable variable=CONDA_DEFAULT_ENV]mne-kit-gui"
        sudo chown -R $USER $CONDA
      displayName: "macOS: set conda paths"
      condition: eq(variables['OS'], 'macos')
    - bash: |
        set -e
        CONDA_PREFIX=$CONDA conda install -n base -c conda-forge -y mamba
        mamba env create -f environment.yml
      displayName: Setup MNE-KIT-GUI environment
    - script: conda remove -yq --force mne-kit-gui
      displayName: Remove stable version of MNE-KIT-GUI
    - script: pip install --progress-bar off -e .[test] codecov pooch
      displayName: Install testing requirements
    - script: pip install --upgrade https://github.com/mne-tools/mne-python/zipball/main
      displayName: Install MNE-Python dev version
      condition: eq(variables['MNE'], 'dev')
    - script: mne sys_info
      displayName: 'Print config'
    - script: python -c "import mne; mne.datasets.testing.data_path(verbose=True)"
      displayName: 'Get test data'
    - script: pytest --tb=short --cov=mne_kit_gui --cov-report=xml --cov-report=html -vv mne_kit_gui
      displayName: 'Run tests'
    - bash: bash <(curl -s https://codecov.io/bash)
      displayName: 'Codecov'
      condition: succeededOrFailed()
